//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace RDN.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class InventariosEntities3 : DbContext
    {
        public InventariosEntities3()
            : base("name=InventariosEntities3")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<InventarioDetalle> InventarioDetalle { get; set; }
        public virtual DbSet<Inventarios> Inventarios { get; set; }
        public virtual DbSet<Productos> Productos { get; set; }
        public virtual DbSet<Saldos> Saldos { get; set; }
        public virtual DbSet<sysdiagrams> sysdiagrams { get; set; }
    
        public virtual int sp_AgregarProducto(string productoID, string descripcion, Nullable<decimal> precioCompra, Nullable<decimal> precioVenta)
        {
            var productoIDParameter = productoID != null ?
                new ObjectParameter("ProductoID", productoID) :
                new ObjectParameter("ProductoID", typeof(string));
    
            var descripcionParameter = descripcion != null ?
                new ObjectParameter("Descripcion", descripcion) :
                new ObjectParameter("Descripcion", typeof(string));
    
            var precioCompraParameter = precioCompra.HasValue ?
                new ObjectParameter("PrecioCompra", precioCompra) :
                new ObjectParameter("PrecioCompra", typeof(decimal));
    
            var precioVentaParameter = precioVenta.HasValue ?
                new ObjectParameter("PrecioVenta", precioVenta) :
                new ObjectParameter("PrecioVenta", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_AgregarProducto", productoIDParameter, descripcionParameter, precioCompraParameter, precioVentaParameter);
        }
    
        public virtual int sp_Alta(Nullable<int> folio, string sucursal, Nullable<System.DateTime> fecha, Nullable<double> total, string tipoMovimiento, Nullable<int> nRegistros)
        {
            var folioParameter = folio.HasValue ?
                new ObjectParameter("Folio", folio) :
                new ObjectParameter("Folio", typeof(int));
    
            var sucursalParameter = sucursal != null ?
                new ObjectParameter("Sucursal", sucursal) :
                new ObjectParameter("Sucursal", typeof(string));
    
            var fechaParameter = fecha.HasValue ?
                new ObjectParameter("Fecha", fecha) :
                new ObjectParameter("Fecha", typeof(System.DateTime));
    
            var totalParameter = total.HasValue ?
                new ObjectParameter("Total", total) :
                new ObjectParameter("Total", typeof(double));
    
            var tipoMovimientoParameter = tipoMovimiento != null ?
                new ObjectParameter("TipoMovimiento", tipoMovimiento) :
                new ObjectParameter("TipoMovimiento", typeof(string));
    
            var nRegistrosParameter = nRegistros.HasValue ?
                new ObjectParameter("nRegistros", nRegistros) :
                new ObjectParameter("nRegistros", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Alta", folioParameter, sucursalParameter, fechaParameter, totalParameter, tipoMovimientoParameter, nRegistrosParameter);
        }
    
        public virtual int sp_Baja(Nullable<int> nFolio, string sSucursal, string sProductoID)
        {
            var nFolioParameter = nFolio.HasValue ?
                new ObjectParameter("nFolio", nFolio) :
                new ObjectParameter("nFolio", typeof(int));
    
            var sSucursalParameter = sSucursal != null ?
                new ObjectParameter("sSucursal", sSucursal) :
                new ObjectParameter("sSucursal", typeof(string));
    
            var sProductoIDParameter = sProductoID != null ?
                new ObjectParameter("sProductoID", sProductoID) :
                new ObjectParameter("sProductoID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Baja", nFolioParameter, sSucursalParameter, sProductoIDParameter);
        }
    
        public virtual int sp_EliminarProducto(string producto)
        {
            var productoParameter = producto != null ?
                new ObjectParameter("Producto", producto) :
                new ObjectParameter("Producto", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_EliminarProducto", productoParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_ObtenerMaximo()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_ObtenerMaximo");
        }
    }
}
